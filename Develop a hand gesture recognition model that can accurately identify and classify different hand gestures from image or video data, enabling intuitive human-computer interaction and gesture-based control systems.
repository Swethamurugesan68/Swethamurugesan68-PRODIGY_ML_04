import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models, optimizers
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Define the CNN model architecture
def create_model(input_shape, num_classes):
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(128, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dense(num_classes, activation='softmax')
    ])
    return model

# Load and preprocess the dataset
def load_data():
    # Placeholder for loading and preprocessing data
    # Replace this with your data loading and preprocessing code
    
    # Example: Loading images and labels
    X = np.load('hand_gestures_images.npy')
    y = np.load('hand_gestures_labels.npy')
    
    # Normalize pixel values to the range [0, 1]
    X = X / 255.0
    
    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Further split training data into training and validation sets
    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)
    
    return X_train, y_train, X_val, y_val, X_test, y_test

# Train the model
def train_model(model, X_train, y_train, X_val, y_val, batch_size=32, epochs=10):
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    
    history = model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, 
                        validation_data=(X_val, y_val))
    
    return history

# Evaluate the model
def evaluate_model(model, X_test, y_test):
    loss, accuracy = model.evaluate(X_test, y_test)
    print("Test Loss:", loss)
    print("Test Accuracy:", accuracy)
    
    # Generate classification report
    y_pred = np.argmax(model.predict(X_test), axis=-1)
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

# Main function
def main():
    # Load and preprocess data
    X_train, y_train, X_val, y_val, X_test, y_test = load_data()
    
    # Define input shape and number of classes
    input_shape = X_train.shape[1:]
    num_classes = len(np.unique(y_train))
    
    # Create the model
    model = create_model(input_shape, num_classes)
    
    # Train the model
    history = train_model(model, X_train, y_train, X_val, y_val)
    
    # Evaluate the model
    evaluate_model(model, X_test, y_test)

if __name__ == "__main__":
    main()
